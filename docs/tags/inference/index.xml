<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inference on GRASP-suite</title>
    <link>http://bodenlab.github.io/GRASP-suite/tags/inference/</link>
    <description>Recent content in Inference on GRASP-suite</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="http://bodenlab.github.io/GRASP-suite/tags/inference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GRASP-cmd</title>
      <link>http://bodenlab.github.io/GRASP-suite/project/graspcmd/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://bodenlab.github.io/GRASP-suite/project/graspcmd/</guid>
      <description>&lt;h2 id=&#34;grasp-command-line-interface&#34;&gt;GRASP command-line interface&lt;/h2&gt;
&lt;p&gt;For users who would like to automate ASR, there is now a command-line version of GRASP that contains all of the indel inference methods. Indels are encoded using either Position Specific (PS), Simple Indel Coding (SIC), or Bi-directional Edge (BE) methods, and inferred using either Parsimony (P) or Maximum Likelihood (ML).&lt;/p&gt;
&lt;p&gt;This gives six methods - PS-P, PS-ML, SIC-P, SIC-ML, BE-P, BE-ML.&lt;/p&gt;
&lt;p&gt;It is implemented in &lt;a href=&#34;https://github.com/bodenlab/bnkit&#34;&gt;bnkit&lt;/a&gt; on the branch &amp;lsquo;POG2020&amp;rsquo; as a class &lt;code&gt;asr.GRASP&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;there is also alimited-feature, legacy command-line version of GRASP. It is implemented in &lt;a href=&#34;https://github.com/bodenlab/bnkit&#34;&gt;bnkit&lt;/a&gt; on the &lt;code&gt;master&lt;/code&gt; branch as a class &lt;code&gt;reconstruction.GraspCmd&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;graspcmd-what-can-it-do&#34;&gt;GraspCmd: What can it do?&lt;/h3&gt;
&lt;p&gt;GraspCmd accepts an alignment (FASTA or Clustal formats) and phylogenetic tree (Newick format) with perfectly concordant labels, to infer ancestor sequences by joint or marginal reconstruction by maximum likelihood. In the process, the program also infers the most parsimonious insertion and deletion events which are internally represented via partial-order graphs; it also identifies the &lt;em&gt;most supported&lt;/em&gt; path of sequence inclusions at each ancestor.&lt;/p&gt;
&lt;p&gt;This command line version of the web service has currently no function to save the (potentially more complex) partial-order graph, but the most supported path always identifies a sequence. The program saves all ancestor sequences (in the case of joint reconstruction, again as FASTA or Clustal) or one sequence (in the case of marginal reconstrution; optionally with character state distributions as a TSV file). It can also re-save the tree with assigned ancestor labels.&lt;/p&gt;
&lt;p&gt;GRASP was designed primarily for protein sequences but command-line version 0309.2020 incorporates a DNA model &amp;ldquo;Yang&amp;rdquo; (based on &amp;ldquo;REV&amp;rdquo; in Yang Z, &lt;em&gt;J Mol Evol&lt;/em&gt; 1994). At this stage we have not tested DNA sequence functionality extensively, nor have we developed specific features around DNA sequences (codon-centric analyses, user-provided background stats, etc).&lt;/p&gt;
&lt;h3 id=&#34;access-through-docker&#34;&gt;Access through Docker&lt;/h3&gt;
&lt;p&gt;GRASP is available through Docker Hub at &lt;code&gt;gabefoley/grasp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have docker installed you can&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it -v {full path to where your data is located}:/data gabefoley/grasp grasp -aln /data/{name of your alignment file}.aln -nwk /data/{name of your newick file}.nwk -out /data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for example, for me the command looks like (I have test_6.aln and test_6.nwk sitting in a /data folder):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it -v /Users/coolusername/Documents/code/grasp/data:/data grasp-docker grasp -aln /data/test_6.aln -nwk /data/test_6.nwk -out /data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should give you a file, GRASP_ancestors.fasta appearing in folder: /Users/coolusername/Documents/code/grasp/data.&lt;/p&gt;
&lt;h3 id=&#34;graspcmd-how-do-i-make-it-work-on-my-computer&#34;&gt;GraspCmd: How do I make it work on my computer?&lt;/h3&gt;
&lt;p&gt;First, you will need Java version 8 or newer. Any operating system with Java should work, including Mac OS, MS Windows and Linux.&lt;/p&gt;
&lt;p&gt;Then, you have a choice: you can clone/download &lt;a href=&#34;https://github.com/bodenlab/bnkit&#34;&gt;bnkit&lt;/a&gt; in its entirety. You may need JUnit 5 testing to get everything working; this is only required if you want to run software tests, say if you are a developer.&lt;/p&gt;
&lt;p&gt;Alternatively, just download the pre-compiled version with all indel inference methods &lt;a href=&#34;archive/bnkit_20211215.jar&#34;&gt;bnkit JAR file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or, the legacy version &lt;a href=&#34;archive/bnkit_legacy.jar&#34;&gt;bnkit JAR file&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;graspcmd-how-do-i-run-it&#34;&gt;GraspCmd: How do I run it?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the jar file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a bash script grasp that contains the following two lines, replacing the path with the path to your downloaded jar&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;#!/bin/sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -jar &amp;lt;/path/to/filename.jar&amp;gt; $@&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Change permissions on the bash script&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod 755 grasp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Place grasp where you store your executable files, for example - /usr/local/bin&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv grasp /usr/local/bin`
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Check it works&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grasp -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will print out the arguments that specifies your input data and options.&lt;/p&gt;
&lt;p&gt;A typical command may look like this&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;grasp -aln 500_2112_dhad_18032019.aln -nwk r_500_2112_dhad_18032019.nwk -out recon_0500.aln -verbose -gap -thr 5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;what-else&#34;&gt;What else?&lt;/h3&gt;
&lt;p&gt;Running the command-line version is typically a quicker affair, at least for smaller reconstructions, but it requires decent hardware. A reconstruction of less than 1,000 sequences should take less than 10 minutes.&lt;/p&gt;
&lt;p&gt;You can probably run a reconstruction with 10,000 sequences on a server, but how &amp;ldquo;gappy&amp;rdquo; the alignment is will also play a part in deciding this. If the alignment is reasonably clean, a powerful, modern laptop with at least 16GB of memory, can do this in under a day. If the alignment covers a diverse family, you will probably need a lot more memory. We recommend you set the Java heap size to 60GB RAM, which you can using the option -Xmx60000m.&lt;/p&gt;
&lt;p&gt;The rough estimates above assume you use multiple threads; we recommend 5 or so on decent hardware (-thr 5).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identifying and engineering ancient variants of enzymes using Graphical Representation of Ancestral Sequence Predictions (GRASP)</title>
      <link>http://bodenlab.github.io/GRASP-suite/publication/grasp/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://bodenlab.github.io/GRASP-suite/publication/grasp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GRASP</title>
      <link>http://bodenlab.github.io/GRASP-suite/project/grasp/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://bodenlab.github.io/GRASP-suite/project/grasp/</guid>
      <description>&lt;h2 id=&#34;grasp-web-service&#34;&gt;GRASP web service&lt;/h2&gt;
&lt;p&gt;GRASP web service was developed to facilitate the steps of performing a reconstruction of ancestor sequences (represented by partial-order graphs) and the exploration, archival and sharing of the output. The service consists of three major parts: an inference engine &lt;a href=&#34;https://github.com/bodenlab/bnkit&#34;&gt;bnkit&lt;/a&gt; written in Java, a web service backend written in Java using the Spring framework and Postgres, and web client functionality written in Javascript. The latter two are contained in the open source project &lt;a href=&#34;https://github.com/bodenlab/GRASP&#34;&gt;GRASP&lt;/a&gt;. GRASP depends on the open source project &lt;a href=&#34;https://github.com/bodenlab/bnkit&#34;&gt;bnkit&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;grasp-what-can-it-do&#34;&gt;GRASP: What can it do?&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;http://grasp.scmb.uq.edu.au&#34;&gt;GRASP web service&lt;/a&gt; has a User&amp;rsquo;s Guide that we recommend. You will find it in the menu at the top of the GRASP screen at all times.&lt;/p&gt;
&lt;h3 id=&#34;grasp-how-do-i-make-it-work-on-my-computer&#34;&gt;GRASP: How do I make it work on my computer?&lt;/h3&gt;
&lt;p&gt;Use any standard web browser and enter the URL &lt;a href=&#34;http://grasp.scmb.uq.edu.au&#34;&gt;http://grasp.scmb.uq.edu.au&lt;/a&gt;. We recommend that you sign up for an account; with an account you will be able to use a lot of features that otherwise are unavailable.&lt;/p&gt;
&lt;h3 id=&#34;graspcmd-how-do-i-run-it&#34;&gt;GraspCmd: How do I run it?&lt;/h3&gt;
&lt;p&gt;Follow the User&amp;rsquo;s Guide.&lt;/p&gt;
&lt;h3 id=&#34;what-else&#34;&gt;What else?&lt;/h3&gt;
&lt;p&gt;There is a &lt;a href=&#34;&#34;&gt;command-line version&lt;/a&gt; to run reconstructions on your local hardware. This version does &lt;em&gt;not&lt;/em&gt; have all the features; for instance there is no interactive mode and currently no way of transferring your reconstruction to the web service.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
